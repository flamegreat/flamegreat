import{_ as t,c as e,a0 as s,o as d}from"./chunks/framework.CoVXEd1Z.js";const k=JSON.parse('{"title":"加载中容器","description":"","frontmatter":{"head":[["meta",{"name":"keywords","content":"LayLoading"}]],"footer":false,"next":{"text":"LayLoading 加载中容器","link":"/component/loading"}},"headers":[],"relativePath":"controls/loading.md","filePath":"controls/loading.md","lastUpdated":null}'),i={name:"controls/loading.md"};function o(n,a,l,h,c,r){return d(),e("div",null,a[0]||(a[0]=[s(`<h1 id="加载中容器" tabindex="-1">加载中容器 <a class="header-anchor" href="#加载中容器" aria-label="Permalink to &quot;加载中容器&quot;">​</a></h1><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Lay:LayLoading</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Normal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 业务内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Lay:LayLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h2><p>你可以使用 <code>Type</code> 属性来定义容器的加载动画类型。</p><p>使用 <code>Type</code> 属性来定义容器的加载动画类型。 该属性可选值为 <code>Google</code>、<code>Normal</code>、<code>Simple</code>、<code>Beat</code>。</p><h2 id="加载状态" tabindex="-1">加载状态 <a class="header-anchor" href="#加载状态" aria-label="Permalink to &quot;加载状态&quot;">​</a></h2><p>点击按钮来加载数据，并向用户反馈加载状态。</p><p>通过设置 <code>IsActive</code> 属性为 <code>true</code> 来显示加载中状态。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您可以使用 <code>MessageContent</code> 属性自定义加载时显示的内容。</p></div><h2 id="layloading-属性" tabindex="-1">LayLoading 属性 <a class="header-anchor" href="#layloading-属性" aria-label="Permalink to &quot;LayLoading 属性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性名</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>MessageContent</td><td>按钮加载时显示内容</td><td><code>object</code></td><td></td></tr><tr><td>IsActive</td><td>是否为加载中状态</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td>Type</td><td>按钮类型</td><td><code>enum</code></td><td></td></tr></tbody></table>`,12)]))}const g=t(i,[["render",o]]);export{k as __pageData,g as default};
